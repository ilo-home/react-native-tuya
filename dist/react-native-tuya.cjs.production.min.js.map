{"version":3,"file":"react-native-tuya.cjs.production.min.js","sources":["../src/activator.ts","../src/bridgeUtils.ts","../src/device.ts","../src/home.ts","../src/user.ts","../src/homeDataManager.ts","../src/homeManager.ts","../src/homeMember.ts","../src/ota.ts","../src/timer.ts"],"sourcesContent":["import { DeviceBean } from './device';\nimport { NativeModules, Platform } from 'react-native';\nimport { DeviceDetailResponse } from './home';\n\nconst tuya = NativeModules.TuyaActivatorModule;\nconst tuyaBLEActivator = NativeModules.TuyaBLEActivatorModule;\nconst tuyaBLEScanner = NativeModules.TuyaBLEScannerModule;\n\nexport function openNetworkSettings() {\n  return tuya.openNetworkSettings({});\n}\n\nexport enum ActivatorType {\n  AP = 'THING_AP',\n  EZ = 'THING_EZ',\n  AP_4G_GATEWAY = 'THING_4G_GATEWAY',\n  QR = 'THING_QR',\n}\n\nexport type InitActivatorParams = {\n  homeId: number;\n  ssid: string;\n  password: string;\n  time: number;\n  type: ActivatorType;\n};\n\nexport interface InitBluetoothActivatorParams {\n  deviceId?: string;\n  homeId: number;\n  ssid: string;\n  password: string;\n}\n\nexport function initActivator(\n  params: InitActivatorParams\n): Promise<DeviceDetailResponse> {\n  return tuya.initActivator(params);\n}\n\nexport function stopActivator() {\n  return tuya.stopActivator();\n}\n\nexport function destroyActivator() {\n  return tuya.destroyActivator();\n}\n\nexport function startBluetoothScan() {\n  if (Platform.OS === 'ios') {\n    return tuyaBLEScanner.startBluetoothScan();\n  }\n  return tuya.startBluetoothScan();\n}\n\nexport function initBluetoothDualModeActivator(\n  params: InitBluetoothActivatorParams\n): Promise<DeviceBean> {\n  if (Platform.OS === 'ios') {\n    return tuyaBLEActivator.initActivator(params);\n  }\n  return tuya.initBluetoothDualModeActivator(params);\n}\n\nexport function getCurrentWifi(\n  success: (ssid: string) => void,\n  error: () => void\n) {\n  // We need the Allow While Using App location permission to use this.\n  return tuya.getCurrentWifi({}, success, error);\n}\n","import { NativeEventEmitter, NativeModules } from 'react-native';\n\nexport const GROUPLISTENER = 'groupListener';\nexport const HARDWAREUPGRADELISTENER = 'hardwareUpgradeListener';\nexport const DEVLISTENER = 'devListener';\nexport const SUBDEVLISTENER = 'subDevListener';\nexport const HOMESTATUS = 'homeStatus';\nexport const HOMECHANGE = 'homeChange';\nexport const SINGLETRANSFER = 'SingleTransfer';\n\nlet eventEmitter = new NativeEventEmitter(NativeModules.TuyaRNEventEmitter);\n\nexport function addEvent(eventName: string, callback: (data: any) => any) {\n  return eventEmitter.addListener(eventName, callback);\n}\nexport const bridge = (key: string, id: string | number) => `${key}//${id}`;\n","import { NativeModules, EmitterSubscription } from 'react-native';\nimport { addEvent, bridge, DEVLISTENER } from './bridgeUtils';\n\nconst tuya = NativeModules.TuyaDeviceModule;\n\nexport type DeviceBean = {\n  productId: string;\n  devId: string;\n  verSw: string;\n  name: string;\n  dps: DeviceDps;\n};\n\nexport type DevListenerParams = {\n  devId: string;\n};\n\nexport type DevListenerType =\n  | 'onDpUpdate'\n  | 'onRemoved'\n  | 'onStatusChanged'\n  | 'onNetworkStatusChanged'\n  | 'onDevInfoUpdate'\n  | 'onFirmwareUpgradeSuccess'\n  | 'onFirmwareUpgradeFailure'\n  | 'onFirmwareUpgradeProgress';\n\nlet devListenerSubs: { [devId: string]: EmitterSubscription } = {};\n\nexport function registerDevListener(\n  params: DevListenerParams,\n  type: DevListenerType,\n  callback: (data: any) => void\n) {\n  tuya.registerDevListener(params);\n  const sub = addEvent(bridge(DEVLISTENER, params.devId), data => {\n    if (data.type === type) {\n      callback(data);\n    }\n  });\n  devListenerSubs[params.devId] = sub;\n}\n\nexport function unRegisterAllDevListeners() {\n  for (const devId in devListenerSubs) {\n    const sub = devListenerSubs[devId];\n    sub.remove();\n    tuya.unRegisterDevListener({ devId });\n  }\n  devListenerSubs = {};\n}\n\nexport type DeviceDpValue = boolean | number | string | Record<string, string | number | boolean>;\nexport type DeviceDps = {\n  [dpId: string]: DeviceDpValue;\n};\nexport type SendParams = {\n  devId: string;\n  command: DeviceDps;\n}\n\nexport function send(params: SendParams) {\n  return tuya.send(params);\n}\n\nexport type RemoveDeviceParams = { devId: string };\n\nexport function removeDevice(params: RemoveDeviceParams): Promise<string> {\n  return tuya.removeDevice(params);\n}\n\nexport type RenameDeviceParams = { devId: string; name: string };\n\nexport function renameDevice(params: RenameDeviceParams): Promise<string> {\n  return tuya.renameDevice(params);\n}\n\nexport type GetDataPointStatsParams = {\n  devId: string;\n  DataPointTypeEnum: 'DAY' | 'WEEK' | 'MONTH';\n  number: number; // number of historical data result values, up to 50\n  dpId: string;\n  startTime: number; // in ms\n};\n\nexport function getDataPointStat(\n  params: GetDataPointStatsParams\n): Promise<any> {\n  return tuya.getDataPointStat(params);\n}\n","import { NativeModules, Platform } from 'react-native';\nimport { DeviceDps } from './device';\n\nconst tuya = NativeModules.TuyaHomeModule;\n\nexport type QueryRoomListParams = {\n  homeId?: number;\n};\nexport type QueryRoomListResponse = {\n  name: string;\n  displayOrder: number;\n  id: number;\n  roomId: number;\n}[];\n\nexport function queryRoomList(\n  params: QueryRoomListParams\n): Promise<QueryRoomListResponse> {\n  return tuya.queryRoomList(params);\n}\n\nexport type GetHomeDetailParams = {\n  homeId: number;\n};\nexport type DeviceDetailResponse = {\n  homeId: number;\n  isOnline: boolean;\n  isLocalOnline: boolean; \n  cloudOnline: boolean;\n  productId: string;\n  category: string; // e.g. \"dj\"\n  categoryCode: string; // e.g. \"wf_ble_dj\"\n  devId: string;\n  iconUrl: string;\n  verSw: string;\n  name: string;\n  dps: DeviceDps;\n  homeDisplayOrder: number;\n  roomId: number;\n};\nexport type GetHomeDetailResponse = {\n  deviceList: DeviceDetailResponse[];\n  groupList: any[];\n  meshList: any[];\n  sharedDeviceList: any[];\n  sharedGroupList: any[];\n};\n\nexport function getHomeDetail(\n  params: GetHomeDetailParams\n): Promise<GetHomeDetailResponse> {\n  const home = tuya.getHomeDetail(params);\n\n  // Tuya's Android SDK uses different property names and has different types than the iOS SDK...\n  if (Platform.OS === 'android') {\n    home.deviceList = home.deviceList.map((device: any) => ({\n      ...device,\n      homeId: parseInt(device.ownerId),\n      category: device.deviceCategory\n    }));\n  }\n\n  return home;\n}\n\nexport type UpdateHomeParams = {\n  homeId: number;\n  name: string;\n  geoName: string;\n  lon: number;\n  lat: number;\n};\n\nexport function updateHome(params: UpdateHomeParams): Promise<string> {\n  return tuya.updateHome(params);\n}\n\nexport type DismissHomeParams = {\n  homeId: number;\n};\n\nexport function dismissHome(params: DismissHomeParams): Promise<string> {\n  return tuya.dismissHome(params);\n}\n\nexport type SortRoomsParams = {\n  idList: number[];\n  homeId: number;\n};\n\nexport function sortRoom(params: SortRoomsParams): Promise<string> {\n  return tuya.sortRoom(params);\n}\n","import { NativeModules } from 'react-native';\n\nconst tuya = NativeModules.TuyaUserModule;\n\nexport function loginOrRegisterWithUid(\n  params: LoginOrRegisterAccountWithUidParams\n): Promise<any> {\n  return tuya.loginOrRegisterWithUid(params);\n}\n\nexport function registerAccountWithEmail(\n  params: RegisterAccountParams\n): Promise<any> {\n  return tuya.registerAccountWithEmail(params);\n}\n\nexport function loginWithEmailPassword(params: LoginWithPasswordParams): Promise<any> {\n  return tuya.loginWithEmailPassword(params);\n}\n\nexport function getValidateCode(\n  params: GetValidateCodeParams\n): Promise<any> {\n  return tuya.getValidateCode(params);\n}\n\nexport function checkValidateCode(\n  params: CheckValidateCodeParams\n): Promise<any> {\n  return tuya.checkValidateCode(params);\n}\n\nexport function resetEmailPassword(\n  params: ResetPasswordParams\n): Promise<any> {\n  return tuya.resetEmailPassword(params);\n}\n\nexport function logout(): Promise<string> {\n  return tuya.logout();\n}\n\nexport async function getCurrentUser(): Promise<User | null> {\n  const user = await tuya.getCurrentUser();\n  // The iOS SDK returns an empty user model but the Android one doesn't.\n  return user ? user : null;\n}\n\nexport function cancelAccount(): Promise<string> {\n  return tuya.cancelAccount();\n}\n\nexport enum ValidateCodeType {\n  REGISTER = 1,\n  LOGIN = 2,\n  RESET_PASSWORD = 3\n}\n\nexport type User = {\n  email: string;\n  username: string;\n  sid: string;\n  timezoneId: string;\n  uid: string;\n  userType: number;\n  headPic: string;\n  mobile: string;\n  nickName: string;\n  phoneCode: string;\n};\n\nexport type LoginOrRegisterAccountWithUidParams = {\n  countryCode: string;\n  id: string; // This can be an email address, phone number, generated uid\n  password: string; // This should match id\n};\n\nexport type RegisterAccountParams = {\n  countryCode: string;\n  id: string; // This can be an email address, phone number, generated uid\n  validateCode: string;\n  password: string;\n};\n\nexport type GetValidateCodeParams = {\n  countryCode: string;\n  region: string;\n  id: string; // Email address or phone number\n  type: ValidateCodeType;\n};\n\nexport type CheckValidateCodeParams = {\n  countryCode: string;\n  region: string;\n  id: string; // Email address or phone number\n  validateCode: string;\n  type: ValidateCodeType;\n};\n\nexport type LoginWithPasswordParams = {\n  id: string;\n  password: string;\n  countryCode: string;\n};\n\nexport type ResetPasswordParams = {\n  id: string;\n  countryCode: string;\n  validateCode: string;\n  newPassword: string;\n};\n","import { NativeModules } from 'react-native';\n\nconst tuya = NativeModules.TuyaHomeDataManagerModule;\n\nexport type GetRoomDeviceListParams = {\n  homeId?: number;\n  roomId: number;\n};\n\nexport type GetRoomDeviceListResponse = {\n  deviceList: {}[];\n  groupList: {}[];\n};\n\nexport function getRoomDeviceList(\n  params: GetRoomDeviceListParams\n): Promise<GetRoomDeviceListResponse> {\n  return tuya.getRoomDeviceList(params);\n}\n","import { NativeModules, Platform } from 'react-native';\n\nconst tuya = NativeModules.TuyaHomeManagerModule;\n\nexport type CreateHomeParams = {\n  name: string;\n  geoName: string;\n  lon: number;\n  lat: number;\n  rooms: string[];\n};\n\nexport function createHome(params: CreateHomeParams): Promise<string> {\n  return tuya.createHome(params);\n}\n\nexport type HomeDetailsResponse = {\n  name: string;\n  admin: boolean;\n  background: string;\n  dealStatus: 1 | 2 | 3; // 1 = unaccepted, 2 = accepted, 3 = rejected\n  displayOrder: number;\n  geoName: string;\n  gid: number;\n  role: -1 | 0 | 1 | 2 | 999; // -1 = custom, 0 = member, 1 = admin, 2 = owner, -999 = invalid\n  homeId: number;\n  lat: number;\n  lon: number;\n};\n\nexport type QueryHomeListResponse = HomeDetailsResponse[];\n\nexport async function queryHomeList(): Promise<QueryHomeListResponse> {\n  let homes = await tuya.queryHomeList();\n  // Tuya's Android SDK uses different property names than the iOS SDK...\n  if (Platform.OS === 'android') {\n    homes = homes.map((m: any) => ({\n      ...m,\n      dealStatus: m.homeStatus,\n    }));\n  }\n  return homes;\n}\n\nexport type JoinFamilyParams = {\n  homeId: number;\n  action: boolean;\n};\n\nexport function joinFamily(params: JoinFamilyParams) {\n  return tuya.joinFamily(params);\n}\n","import { NativeModules, Platform } from 'react-native';\n\nconst tuya = NativeModules.TuyaHomeMemberModule;\n\nexport type QueryMemberListParams = { homeId: number };\nexport type MemberListItem = {\n  admin: boolean;\n  username: string;\n  id: number;\n  dealStatus: number;\n};\nexport type QueryMemberListResponse = MemberListItem[];\n\nexport async function queryMemberList(\n  params: QueryMemberListParams\n): Promise<QueryMemberListResponse> {\n  let members = await tuya.queryMemberList(params);\n  // Tuya's Android SDK uses different property names than the iOS SDK...\n  if (Platform.OS === 'android') {\n    members = members.map((m: any) => ({\n      admin: m.admin,\n      username: m.account,\n      id: m.memberId,\n      dealStatus: m.memberStatus,\n    }));\n  }\n  return members;\n}\n\nexport type AddMemberParams = {\n  homeId: number;\n  userAccount: string; // email\n  countryCode: string;\n  name: string;\n  admin: boolean;\n};\n\nexport function addMember(params: AddMemberParams): Promise<any> {\n  return tuya.addMember(params);\n}\n\nexport type RemoveMemberParams = {\n  memberId: number;\n};\n\nexport function removeMember(params: RemoveMemberParams): Promise<any> {\n  return tuya.removeMember(params);\n}\n","import { NativeModules } from 'react-native';\nimport { addEvent, bridge, HARDWAREUPGRADELISTENER } from './bridgeUtils';\n\nconst tuya = NativeModules.TuyaDeviceModule;\n\nexport type StartOtaParams = {\n  devId: string;\n};\n\nexport function startOta(\n  params: StartOtaParams,\n  onSuccess: (data: any) => void,\n  onFailure: (data: any) => void,\n  onProgress: (data: any) => void\n) {\n  tuya.startOta(params);\n  return addEvent(bridge(HARDWAREUPGRADELISTENER, params.devId), data => {\n    if (data.type === 'onSuccess') {\n      onSuccess(data);\n    } else if (data.type === 'onFailure') {\n      onFailure(data);\n    } else if (data.type === 'onProgress') {\n      onProgress(data);\n    }\n  });\n}\n\nexport function getOtaInfo(params: StartOtaParams): Promise<any[]> {\n  return tuya.getOtaInfo(params);\n}\n","import { NativeModules, Platform } from 'react-native';\nimport { DeviceDps } from './device';\n\nconst tuya = NativeModules.TuyaTimerModule;\n\nexport type AddTimerWithTaskDpsParams = {\n  devId: string;\n  taskName: string;\n  loops: string; // Number of cycles \"0000000\", each 0: off, 1: on, from left to right: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\n  time: string; // e.g. 14:29\n  dps: DeviceDps;\n};\n\nexport function addTimerWithTask(\n  params: AddTimerWithTaskDpsParams\n): Promise<any> {\n  return tuya.addTimerWithTask(params);\n}\n\nexport type UpdateTimerWithTaskParams = AddTimerWithTaskDpsParams & {\n  timerId: string;\n  isOpen: boolean;\n};\n\nexport function updateTimerWithTask(\n  params: UpdateTimerWithTaskParams\n): Promise<any> {\n  return tuya.updateTimerWithTask(params);\n}\n\nexport type GetTimerTaskStatusWithDeviceIdParams = {\n  devId: string;\n};\n\nexport function getTimerTaskStatusWithDeviceId(\n  params: GetTimerTaskStatusWithDeviceIdParams\n): Promise<any> {\n  return tuya.getTimerTaskStatusWithDeviceId(params);\n}\n\nexport type GetAllTimerWithDeviceIdParams = {\n  devId: string;\n};\n\nexport type TimerTask = {\n  timerList: {\n    timerId: string;\n    loops: string;\n    time: string;\n    status: boolean; // true = open, false = closed\n    dps: DeviceDps;\n  }[];\n  timerTaskStatus: { open: boolean; timerName: string };\n};\n\nexport type GetAllTimerWithDeviceIdResponse = TimerTask[];\n\nexport async function getAllTimerWithDeviceId(\n  params: GetAllTimerWithDeviceIdParams\n): Promise<GetAllTimerWithDeviceIdResponse> {\n  const timers = await tuya.getAllTimerWithDeviceId(params);\n  timers.forEach((t: any) => {\n    t.timerTaskStatus.open = !!t.timerTaskStatus.open;\n\n    // Tuya's Android SDK uses different property names and has different types than the iOS SDK...\n    if (Platform.OS === 'android') {\n      t.timerList = t.timerList.map((timer: any) => ({\n        ...timer,\n        status: !!timer.status,\n        dps: JSON.parse(timer.value)\n      }));\n    }\n    \n  });\n  return timers;\n}\n\nexport type GetTimerWithTaskParams = {\n  devId: string;\n  taskName: string;\n};\n\nexport type GetTimerWithTaskResponse = TimerTask[];\n\nexport async function getTimerWithTask(\n  params: GetTimerWithTaskParams\n): Promise<GetTimerWithTaskResponse> {\n  const timers = await tuya.getTimerWithTask(params);\n  timers.forEach((t: any) => {\n    t.timerTaskStatus.open = !!t.timerTaskStatus.open;\n  });\n  return timers;\n}\n\nexport type RemoveTimerWithTaskParams = {\n  devId: string;\n  taskName: string;\n  timerId: string;\n};\n\nexport function removeTimerWithTask(\n  params: RemoveTimerWithTaskParams\n): Promise<any> {\n  return tuya.removeTimerWithTask(params);\n}\n\nexport type UpdateTimerStatusWithTaskParams = {\n  devId: string;\n  taskName: string;\n  timerId: string;\n  isOpen: boolean;\n};\n\nexport function updateTimerStatusWithTask(\n  params: UpdateTimerStatusWithTaskParams\n): Promise<any> {\n  return tuya.updateTimerStatusWithTask(params);\n}\n\nexport type UpdateTimerTaskStatusWithTaskParams = {\n  devId: string;\n  taskName: string;\n  status: 1 | 2 | 3; // 1 = open, 2 = close, 3 = delete\n};\n\nexport function updateTimerTaskStatusWithTask(\n  params: UpdateTimerTaskStatusWithTaskParams\n): Promise<any> {\n  return tuya.updateTimerTaskStatusWithTask(params);\n}\n"],"names":["ActivatorType","tuya","NativeModules","TuyaActivatorModule","tuyaBLEActivator","TuyaBLEActivatorModule","tuyaBLEScanner","TuyaBLEScannerModule","eventEmitter","NativeEventEmitter","TuyaRNEventEmitter","addEvent","eventName","callback","addListener","bridge","key","id","TuyaDeviceModule","devListenerSubs","ValidateCodeType","TuyaHomeModule","TuyaHomeDataManagerModule","TuyaHomeManagerModule","TuyaHomeMemberModule","TuyaTimerModule","TuyaUserModule","params","addMember","addTimerWithTask","cancelAccount","checkValidateCode","createHome","destroyActivator","dismissHome","getAllTimerWithDeviceId","then","timers","forEach","t","timerTaskStatus","open","Platform","OS","timerList","map","timer","_extends","status","dps","JSON","parse","value","e","Promise","reject","getCurrentUser","user","success","error","getCurrentWifi","getDataPointStat","home","getHomeDetail","deviceList","device","homeId","parseInt","ownerId","category","deviceCategory","getOtaInfo","getRoomDeviceList","getTimerTaskStatusWithDeviceId","getTimerWithTask","getValidateCode","initActivator","initBluetoothDualModeActivator","joinFamily","loginOrRegisterWithUid","loginWithEmailPassword","logout","openNetworkSettings","queryHomeList","homes","m","dealStatus","homeStatus","queryMemberList","members","admin","username","account","memberId","memberStatus","queryRoomList","registerAccountWithEmail","type","registerDevListener","sub","devId","data","removeDevice","removeMember","removeTimerWithTask","renameDevice","resetEmailPassword","send","sortRoom","startBluetoothScan","onSuccess","onFailure","onProgress","startOta","stopActivator","remove","unRegisterDevListener","updateHome","updateTimerStatusWithTask","updateTimerTaskStatusWithTask","updateTimerWithTask"],"mappings":"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"}